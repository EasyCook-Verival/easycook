require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe RecipesController, type: :controller do
  # This should return the minimal set of attributes required to create a valid
  # Recipe. As you add validations to Recipe, be sure to
  # adjust the attributes here as well.
  before(:each) do
    # RecipesController.class_variable_set(:@@recipes_builder, MainPlateBuilder.new)
    Ingredient.create!({ name: 'MyString', description: 'MyText' })

    User.destroy_all
    Role.destroy_all

    @admin_role = Role.create! name: 'admin'
    @cook_role = Role.create! name: 'cook'

    @admin = create_sample_user 'admin', @admin_role
    @cook = create_sample_user 'cook', @cook_role

  end

  let(:valid_attributes) do
    { name: 'MyString', description: 'MyText', instructions: 'MyString' }
  end

  let(:invalid_attributes) do
    { name: '', description: '', instructions: '' }
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # RecipesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe 'GET #index' do
    it 'assigns all recipes as @recipes' do
      recipe = Recipe.create! valid_attributes
      get :index, params: {}, session: valid_session
      expect(assigns(:recipes)).to eq([recipe])
    end
  end

  describe 'GET #show' do
    it 'assigns the requested recipe as @recipe' do
      recipe = Recipe.create! valid_attributes
      get :show, { id: recipe.to_param }, session: valid_session
      expect(assigns(:recipe)).to eq(recipe)
    end
  end

  describe 'GET #new' do
    it 'assigns a new recipe as @recipe' do
      get :new, session: valid_session
      expect(assigns(:recipe)).to be_a_new(Recipe)
    end

    it 'search for ingredients on recipe creation' do
      ingredients = ["Alcaparra", "Pimenta", "Cominho", "Alho"].each do |name|
        Ingredient.create! name: name, description: name
      end
      get :new, :search=>"pim", session: valid_session
      expect(assigns(:ingredients).size).to eq(1)
    end

    it 'sort ingredients by name by default on recipe creation' do
      ingredients = ["Alcaparra", "Pimenta"]
      get :new, :search=>nil, session: valid_session

      expect(assigns(:ingredients).first.name).to eq(ingredients.first)
      expect(assigns(:ingredients).last.name).to eq(ingredients.last)
    end
  end

  describe 'GET #edit' do
    it 'assigns the requested recipe as @recipe' do
      recipe = Recipe.create! valid_attributes
      get :edit, { id: recipe.to_param }, session: valid_session
      expect(assigns(:recipe)).to eq(recipe)
    end
  end

  describe 'POST #create' do
    context 'with valid params' do
      it 'creates a new Recipe' do
        sign_in @cook
        expect do
          post :create,
               {recipe: valid_attributes },
               session: valid_session
        end.to change(Recipe, :count).by(1)
      end

      it 'assigns a newly created recipe as @recipe' do
        sign_in @cook
        post :create,
             { recipe: valid_attributes },
             session: valid_session
        expect(assigns(:recipe)).to be_a(Recipe)
        expect(assigns(:recipe)).to be_persisted
      end

      it 'redirects to the created recipe' do
        sign_in @cook
        post :create,
             { recipe: valid_attributes },
             session: valid_session
        expect(response).to redirect_to(Recipe.last)
      end
    end

    context 'with invalid params' do
      it 'assigns a newly created but unsaved recipe as @recipe' do
        sign_in @admin
        get :new,
            session: valid_session
        expect(assigns(:recipe)).to be_a_new(Recipe)
      end

      it 're-renders the \'new\' template' do
        sign_in @cook
        post :create,
             { recipe: invalid_attributes },
             session: valid_session
        expect(response).to render_template('new')
      end
    end
  end

  describe 'PUT #update' do
    context 'with valid params' do
      let(:new_attributes) do
        { name: 'updated', description: 'updated', instructions: 'updated' }
      end

      it 'updates the requested recipe' do
        recipe = Recipe.create! valid_attributes
        put :update,
            { id: recipe.to_param, recipe: new_attributes },
            session: valid_session
        recipe.reload
        expect(recipe.name).to eql new_attributes[:name]
      end

      it 'assigns the requested recipe as @recipe' do
        recipe = Recipe.create! valid_attributes
        put :update,
            { id: recipe.to_param, recipe: valid_attributes },
            session: valid_session
        expect(assigns(:recipe)).to eq(recipe)
      end

      it 'redirects to the recipe' do
        recipe = Recipe.create! valid_attributes
        put :update,
            { id: recipe.to_param, recipe: valid_attributes },
            session: valid_session
        expect(response).to redirect_to(recipe)
      end
    end

    context 'with invalid params' do
      it 'assigns the recipe as @recipe' do
        recipe = Recipe.create! valid_attributes
        put :update,
            { id: recipe.to_param, recipe: invalid_attributes },
            session: valid_session
        expect(assigns(:recipe)).to eq(recipe)
      end

      it 're-renders the \'edit\' template' do
        recipe = Recipe.create! valid_attributes
        put :update,
            { id: recipe.to_param, recipe: invalid_attributes },
            session: valid_session
        expect(response).to render_template('edit')
      end
    end
  end

  describe 'DELETE #destroy' do
    it 'destroys the requested recipe' do
      recipe = Recipe.create! valid_attributes
      expect do
        delete :destroy, { id: recipe.to_param }, session: valid_session
      end.to change(Recipe, :count).by(-1)
    end

    it 'redirects to the recipes list' do
      recipe = Recipe.create! valid_attributes
      delete :destroy, { id: recipe.to_param }, session: valid_session
      expect(response).to redirect_to(recipes_url)
    end
  end

  private

    def create_sample_user name, role
      user = User.create! first_name: "test#{name}",
                          last_name: "test#{name}",
                          email: "#{name}@user.com",
                          password: "test#{name}",
                          username: "test#{name}",
                          role: role
      user
    end
end
